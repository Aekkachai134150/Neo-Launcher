import java.text.SimpleDateFormat

buildscript {

    ext {
        versions = [
                dynamicanimation       : "1.0.0",
                appcompat              : "1.2.0",
                preferencev14          : "1.0.0",
                recyclerview           : "1+",
                preference             : "1.1.1",
                material               : "1.3.0",
                constraintlayout       : "2.0.4",
                customactivityoncrash  : '2.3.0',
                colorpicker            : "1.1.0",
                hokolite               : "0e21db9ae5",
                sunrisesunsetcalculator: "1.2",
                okhttp                 : "4.8.0",
                logginginterceptor     : "4.8.0",
                fuzzywuzzy             : "1.3.1",
                junit                  : "1.1.1",
                mockito                : "3.9.0",
                dexmaker               : "1.2",
                testjunit              : "1.1.1",
                testrules              : "1.2.0",
                uiautomator            : "2.2.0",
                annotation             : "1.1.0",

                kotlin                 : "1.5.0",
                protobuf               : "0.8.12"
        ]
    }

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0'
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.16"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    }
}

allprojects {
    repositories {
        maven { url "../../../prebuilts/sdk/current/androidx/m2repository" }
        maven { url "../../../prebuilts/fullsdk-darwin/extras/android/m2repository" }
        maven { url "../../../prebuilts/fullsdk-linux/extras/android/m2repository" }
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    ext.addFrameworkJar = { String path ->
        def frameworkJar = new File(rootProject.projectDir, 'prebuilts/libs/' + path)
        if (!frameworkJar.exists()) {
            throw new IllegalArgumentException("Framework jar path doesn't exist")
        }
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.bootstrapClasspath = files([frameworkJar] + (options.bootstrapClasspath.files as Iterable<File>))
            }
        }
    }
}

final String FRAMEWORK_PREBUILTS_DIR = "prebuilts/"

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 30

    def name = "0.8.0"
    def code = 159

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 30
        applicationId 'com.saggitt.omega'

        versionName name
        versionCode code

        buildConfigField "String[]", "DETECTED_ANDROID_LOCALES", "${findAndroidLocales()}"
        buildConfigField "boolean", "FEATURE_SETTINGS_SEARCH", "true"
        buildConfigField "String", "BUILD_DATE", "\"${getBuildDate()}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".dev"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.flags'
        }
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // The flavor dimensions for build variants (e.g. aospWithQuickstep, aospWithoutQuickstep)
    // See: https://developer.android.com/studio/build/build-variants#flavor-dimensions
    flavorDimensions "app", "recents", "custom"

    productFlavors {
        aosp {
            dimension "app"
            applicationId 'com.saggitt.omega'
            testApplicationId 'com.android.launcher3.tests'
        }

        withQuickstep {
            dimension "recents"
        }

        omega {
            dimension "custom"
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src', 'src_plugins']
            assets.srcDirs = ['assets']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDir 'protos/'
                srcDir 'proto_pixel/'
                srcDir 'proto_overrides/'
            }
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src', 'tests/tapl']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        androidTestDebug {
            manifest.srcFile "tests/AndroidManifest.xml"
        }

        aosp {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides']
        }

        withQuickstep {
            res.srcDirs = ['quickstep/res', 'quickstep/recents_ui_overrides/res']
            java.srcDirs = ['quickstep/src', 'quickstep/recents_ui_overrides/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }

        omega {
            res.srcDirs = ['Omega/res']
            aidl.srcDirs = ['Omega/aidl']
            java.srcDirs = ['Omega/src', 'Omega/src_ui_overrides']
            manifest.srcFile 'Omega/AndroidManifest.xml'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        abortOnError false
        checkReleaseBuilds false
    }

    buildFeatures {
        viewBinding true
    }

    addFrameworkJar('framework.jar')
}

dependencies {
    implementation project(':IconLoader')
    withQuickstepImplementation project(':SharedLibWrapper')

    // UI
    implementation "androidx.core:core-ktx:$ANDROID_X_VERSION"
    implementation "androidx.appcompat:appcompat:$ANDROID_X_VERSION"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerview}"
    implementation "androidx.preference:preference-ktx:${versions.preference}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "androidx.dynamicanimation:dynamicanimation:${versions.dynamicanimation}"
    implementation "com.google.android.material:material:${versions.material}"

    // Libs
    implementation "cat.ereza:customactivityoncrash:${versions.customactivityoncrash}"
    implementation "com.jaredrummler:colorpicker:${versions.colorpicker}"
    implementation "com.github.LawnchairLauncher:hoko-lite:${versions.hokolite}"
    implementation "com.luckycatlabs:SunriseSunsetCalculator:${versions.sunrisesunsetcalculator}"
    implementation "me.xdrop:fuzzywuzzy:${versions.fuzzywuzzy}"
    implementation 'com.github.otakuhqz:colorpickerx:1.4.2'
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.logginginterceptor}"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"


    // Recents lib dependency
    //withQuickstepImplementation project(':SystemUISharedLib')
    withQuickstepImplementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'sysui_shared.jar')

    // Required for AOSP to compile. This is already included in the sysui_shared.jar
    //implementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'plugin_core.jar')

    // Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation "org.mockito:mockito-core:1.9.5"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "androidx.annotation:annotation:$ANDROID_X_VERSION"

    implementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'sysui_statslog.jar')
    implementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'launcher_protos.jar')
    implementation 'com.google.protobuf:protobuf-lite:3.0.0'
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
                javanano {
                    option "enum_style=java"
                }
            }
            task.plugins {
                javalite {}
            }
        }
    }
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection", "GroovyUnusedDeclaration"])
// Returns used android languages as a buildConfig array: {'de', 'it', ..}"
static String findAndroidLocales() {
    Set<String> langs = new HashSet<>()
    new File('.').eachFileRecurse(groovy.io.FileType.DIRECTORIES) {
        final foldername = it.name
        if (foldername.startsWith('values-')
                && !it.canonicalPath.contains("build" + File.separator + "intermediates")
                && !it.canonicalPath.contains("gradle" + File.separator + "daemon")) {
            new File(it.toString()).eachFileRecurse(groovy.io.FileType.FILES) {
                if (it.name.toLowerCase().endsWith(".xml")
                        && it.getCanonicalFile().getText('UTF-8').contains("<string")) {
                    langs.add(foldername.replace("values-", ""))
                }
            }
        }
    }
    return '{' + langs.collect { "\"${it}\"" }.join(",") + '}'
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection", "GroovyUnusedDeclaration"])
// Returns the build date in a RFC3339 compatible format. TZ is always converted to UTC
static String getBuildDate() {
    final SimpleDateFormat RFC3339_LIKE = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    RFC3339_LIKE.setTimeZone(TimeZone.getTimeZone("UTC"))
    return RFC3339_LIKE.format(new Date())
}