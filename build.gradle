import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.0'
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.18"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${KOTLIN_VERSION}"
    }
}

allprojects {
    repositories {
        maven { url "../../../prebuilts/sdk/current/androidx/m2repository" }
        maven { url "../../../prebuilts/fullsdk-darwin/extras/android/m2repository" }
        maven { url "../../../prebuilts/fullsdk-linux/extras/android/m2repository" }
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    ext.addFrameworkJar = { String path ->
        def frameworkJar = new File(rootProject.projectDir, 'prebuilts/libs/' + path)
        if (!frameworkJar.exists()) {
            throw new IllegalArgumentException("Framework jar path doesn't exist")
        }
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.bootstrapClasspath = files([frameworkJar] + (options.bootstrapClasspath?.files as Iterable<File>))
            }
            tasks.withType(org.jetbrains.kotlin.gradle.internal.KaptWithoutKotlincTask) {
                it.classpath.from(files([frameworkJar] + (it.classpath.files as Iterable<File>)))
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        }
    }
}

final String FRAMEWORK_PREBUILTS_DIR = "prebuilts/"

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    compileSdk 32

    def name = "0.9.0"
    def code = 907

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 32
        applicationId 'com.saggitt.omega'

        versionName name
        versionCode code

        buildConfigField "String", "BUILD_DATE", "\"${getBuildDate()}\""
        buildConfigField "boolean", "ENABLE_AUTO_INSTALLS_LAYOUT", "false"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "NeoLauncher_v${variant.versionName}_build_${variant.versionCode}.apk"
        }
        resValue("string", "launcher_component", "${applicationId}/com.saggitt.omega.OmegaLauncher")
    }
    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".alpha"
            versionNameSuffix "-beta1"
            manifestPlaceholders = [
                    appIcon     : "@mipmap/ic_launcher_debug",
                    appIconRound: "@mipmap/ic_launcher_round_debug"
            ]
        }
        neo {
            minifyEnabled false
            applicationIdSuffix ".neo"
            versionNameSuffix "-beta1"
            manifestPlaceholders = [
                    appIcon     : "@mipmap/ic_launcher_debug",
                    appIconRound: "@mipmap/ic_launcher_round_debug"
            ]
        }

        release {
            minifyEnabled false
            versionNameSuffix "-beta1"
            proguardFiles "proguard-android-optimize.txt", "proguard.flags"
            manifestPlaceholders = [
                    appIcon     : "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round"
            ]
        }
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildFeatures {
        compose true
        dataBinding true
        viewBinding true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.2.0-beta01"
    }

    kotlinOptions {
        jvmTarget = compileOptions.getSourceCompatibility().toString()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['**/libeasyBypass.so']
        }
    }

    // The flavor dimensions for build variants (e.g. aospWithQuickstep, aospWithoutQuickstep)
    // See: https://developer.android.com/studio/build/build-variants#flavor-dimensions
    flavorDimensions "app", "recents", "custom"

    productFlavors {
        aosp {
            dimension "app"
            applicationId 'com.saggitt.omega'
            testApplicationId 'com.android.launcher3.tests'
        }

        withQuickstep {
            dimension "recents"
            minSdkVersion 26
        }

        withoutQuickstep {
            dimension "recents"
        }

        omega {
            dimension "custom"
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src', 'src_plugins']
            assets.srcDirs = ['assets']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDirs = ['protos/', 'quickstep/protos_overrides/']
            }
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src', 'tests/tapl']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        androidTestDebug {
            manifest.srcFile "tests/AndroidManifest.xml"
        }

        aosp {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides']
        }

        withoutQuickstep {
            java.srcDirs = ['src_ui_overrides']
        }

        withQuickstep {
            res.srcDirs = ['quickstep/res', 'quickstep/recents_ui_overrides/res']
            java.srcDirs = ['quickstep/src', 'quickstep/recents_ui_overrides/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }

        omega {
            res.srcDirs = ['Omega/res']
            java.srcDirs = ['Omega/src', 'Omega/src_ui_overrides']
            manifest.srcFile "Omega/AndroidManifest.xml"
        }
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    addFrameworkJar('framework-12.jar')
}

dependencies {
    implementation project(':iconloaderlib')
    implementation project(':searchuilib')

    //UI
    implementation "androidx.appcompat:appcompat:1.6.0-alpha03"
    implementation "androidx.constraintlayout:constraintlayout:2.1.3"
    implementation "androidx.dynamicanimation:dynamicanimation:1.0.0"
    implementation "androidx.core:core-ktx:${ANDROID_X_VERSION}"
    implementation "androidx.activity:activity-ktx:1.6.0-alpha03"
    implementation 'androidx.fragment:fragment-ktx:1.5.0-rc01'
    implementation 'androidx.savedstate:savedstate-ktx:1.2.0-rc01'
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "com.google.android.material:material:1.7.0-alpha01"
    implementation "com.jaredrummler:colorpicker:1.1.0"

    // Libs
    implementation "io.github.hokofly:hoko-blur:1.3.7"
    implementation "com.luckycatlabs:SunriseSunsetCalculator:1.2"
    implementation "com.github.farmerbb:libtaskbar:2.2.0"
    implementation "com.mikepenz:fastadapter:5.6.0"
    implementation "com.mikepenz:fastadapter-extensions-diff:5.6.0"
    implementation "com.mikepenz:fastadapter-extensions-binding:5.6.0"
    implementation 'com.github.otakuhqz.colorpickerx:colorpickerx:1.4.6'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.7'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.7'
    implementation 'com.google.protobuf:protobuf-javalite:3.8.0'
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.2.0rc2'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"
    implementation 'me.xdrop:fuzzywuzzy:1.4.0'
    implementation 'com.github.ChickenHook:RestrictionBypass:2.2'

    //Compose
    implementation 'androidx.compose.compiler:compiler:1.2.0-beta01'
    implementation 'androidx.compose.runtime:runtime:1.2.0-beta01'
    implementation 'androidx.compose.ui:ui:1.2.0-beta01'
    implementation 'androidx.compose.ui:ui-tooling:1.2.0-beta01'
    implementation 'androidx.compose.ui:ui-tooling-preview:1.2.0-beta01'
    implementation 'androidx.compose.foundation:foundation:1.2.0-beta01'
    implementation 'androidx.compose.material3:material3:1.0.0-alpha11'
    implementation "com.google.android.material:compose-theme-adapter-3:1.0.8"
    implementation "androidx.navigation:navigation-compose:2.4.2"
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "io.coil-kt:coil-compose:2.0.0"
    implementation 'com.google.accompanist:accompanist-flowlayout:0.24.7-alpha'
    implementation "com.google.accompanist:accompanist-insets-ui:0.24.7-alpha"
    implementation "com.google.accompanist:accompanist-navigation-animation:0.19.0"
    implementation 'com.google.accompanist:accompanist-systemuicontroller:0.24.7-alpha'
    implementation 'com.google.accompanist:accompanist-drawablepainter:0.24.7-alpha'

    //Room Components
    implementation "androidx.room:room-runtime:2.4.2"
    implementation "androidx.room:room-ktx:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"

    // Recents lib dependency
    withQuickstepImplementation project(':SystemUIShared')
    implementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'wm_shell-aidls.jar')
    implementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'sysui_statslog.jar')

    // Required for AOSP to compile. This is already included in the sysui_shared.jar
    withoutQuickstepImplementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: 'plugin_core.jar')
    implementation fileTree(dir: "${FRAMEWORK_PREBUILTS_DIR}/libs", include: ['libGoogleFeed.jar'])

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.mockito:mockito-core:4.5.1'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation "androidx.annotation:annotation:1.3.0"
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = "com.google.protobuf:protoc:3.18.0"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
                java {
                    option "lite"
                }
            }
        }
    }
}

// using a task as a preBuild dependency instead of a function that takes some time insures that it runs
task detectAndroidLocals {
    Set<String> langsList = new HashSet<>()

    // in /res are (almost) all languages that have a translated string is saved. this is safer and saves some time
    fileTree("res").visit { FileVisitDetails details ->
        if (details.file.path.endsWith("strings.xml")
                && details.file.canonicalFile.getText('UTF-8').contains("<string")) {
            def languageCode = details.file.parentFile.name.replace("values-", "")
            languageCode = (languageCode == "values") ? "en" : languageCode
            langsList.add(languageCode)
        }
    }
    def langsListString = "{${langsList.collect { "\"${it}\"" }.join(",")}}"
    android.defaultConfig.buildConfigField "String[]", "DETECTED_ANDROID_LOCALES", langsListString
}
preBuild.dependsOn detectAndroidLocals

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection", "GroovyUnusedDeclaration"])
// Returns the build date in a RFC3339 compatible format. TZ is always converted to UTC
static String getBuildDate() {
    final SimpleDateFormat RFC3339_LIKE = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    RFC3339_LIKE.setTimeZone(TimeZone.getTimeZone("UTC"))
    return RFC3339_LIKE.format(new Date())
}
